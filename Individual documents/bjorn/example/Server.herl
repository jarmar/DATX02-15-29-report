module Server where
exported
    startServer :: IO ()
    serverAtom :: Atom

newType State a = State a

-- Create the initial server state
initState :: State Int
initState = State 0

-- Modify server state
inc :: State Int -> State Int
inc (State n) = State (n+1)

-- Get Int from state
get :: State -> Int
get (State n) = n

serverAtom :: Atom
serverAtom = stringToAtom "server"

-- Start a new server process and register its pid with the "server" atom
startServer :: IO ()
startServer = do
    pid <- spawn (server initState)
    register serverAtom pid
    return ()

-- Server process. Receives messages of the type (PID, String).
-- If no new message in 1000ms, shut server down.
server :: State Int -> IO ()
server s = do
    receive :: (PID, String)
        (_, msg) -> putStrLn (show s ++ ": " ++ msg)
    after
        1000     -> do 
            unregister serverAtom
            return ()
    server (inc S) -- TCO!


